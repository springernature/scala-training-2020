


collections
-------------------
attempt the initial 30 problems from below:
Scala 99 problems - http://aperiodic.net/phil/scala/s-99/




pattern matching
-------------------

Problem:
Create a trait for Furniture with method detail which returns string.
Implement case classes for Table, Chair, Sofa.
using pattern matching, print the details of the input furniture type.


Problem :
http://aperiodic.net/phil/scala/s-99/

P07 (**) Flatten a nested list structure.
Example:
scala> flatten(List(List(1, 1), 2, List(3, List(5, 8))))
res0: List[Any] = List(1, 1, 2, 3, 5, 8)



Options //assignment
case class Employee(id:Int, name:String, age:Int)
def getEmployee(id:Int):Option[Employee] = {
  //fake DB call -- id between 1 to 1000 valid
  // if no records None(Employee]
  //else Some[Employee]
  Some(Employee(0, "", 0))
}

//handle value of employee
//print the contents of employee

//reimplement using Try, success and failure


SBT
---------
1) scala-training project : add a class with methods,
2) do clean compile publishLocal
3) create new sbt test project2, import dependency of scala-training and use the method.

Scala test
-----------
1) Create a case class Person(name:String, age:Int)
2) Create a class PersonService with methods
   isRetired(person:Person):boolean  --  this should return true of false based on age.
   if age is <= 0 then throw exception.
   isValidName(person:Person):boolean -- if name is empty or length less than 3 then false else true.
Write tests on PersonService for both methods.





// First class functions:
Assignment 1: Write a program to perform basic arithmetic operations which are addition, subtraction, multiplication, and division of two numbers. Numbers are assumed to be integers and will be entered by a user.
Note: Use first class functions in a different way in above problem(function as a parameter, return as a function, lambda expressions).



// tail-recursion
Assignment 2: A non-negative integer variable V is given. There are two actions available that modify its value:
if V is odd, subtract 1 from it;
if V is even, divide it by 2.
These actions are performed until the value of V becomes 0.
For example, if V initially contains value 28, it will become 0 after seven steps:
so seven steps is the output.
Write a solution using tail-recursive function
